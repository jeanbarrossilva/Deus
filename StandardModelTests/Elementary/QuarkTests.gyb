%{
  from datetime import date

  import inflect

  quarks = {
    'up': '2.3 MeV',
    'down': '4.8 MeV',
    'strange': '95 MeV',
    'charm': '1.275 GeV',
    'bottom': '4.18 GeV',
    'top': '173.21 GeV'
  }
}%
// ===-------------------------------------------------------------------------------------------===
// Copyright Â© ${date.today().year} Deus
//
// This file is part of the Deus open-source project.
//
// This program is free software: you can redistribute it and/or modify it under the terms of the
// GNU General Public License as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
// even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License along with this program. If
// not, see https://www.gnu.org/licenses.
// ===-------------------------------------------------------------------------------------------===

import Foundation
import Testing

@testable import StandardModel

% for index, (flavor, mass) in enumerate(quarks.items()):
  % implementation = flavor.capitalize() + "Quark"
  % caseAttribute = '@Test(arguments: AnySingleColor.discretion.map({ color in ' + implementation + '(color: color) }))'
  % caseParameter = '_ quark: ' + implementation + '<AnySingleColor>'
  % mass = mass.split(' ')
  % massValue = float(mass[0])
  % massUnit = mass[1]
  % spelledUnitizedMass = ''.join(char for char in inflect.engine().number_to_words(massValue).title() if char.isalpha()) + massUnit.capitalize()
  % massUnitReference = "UnitMass.megaelectronvolt" if massUnit == 'MeV' else "UnitMass.gigaelectronvolt" if massUnit == "GeV" else "UnitMass.baseUnit()"
  % symbol = flavor[0]
struct ${implementation}Tests {
  ${caseAttribute}
  func baseMassIs${spelledUnitizedMass}(${caseParameter}) {
    #expect(quark.getMass(approximatedBy: .base) == Measurement(value: ${massValue}, unit: ${massUnitReference}))
  }

  ${caseAttribute}
  func symbolIs${symbol.capitalize()}(${caseParameter}) {
    #expect(quark.symbol == "${symbol}")
  }
}
  % if index < len(quarks) - 1:

  % end
% end
