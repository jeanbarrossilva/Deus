%{
  from datetime import date

  measurement_classes_and_backing_unit_cases = {
    'Angle': 'radians',
    'Charge': 'elementary',
    'Energy': 'megaelectronvolts'
  }
}%
// ===-------------------------------------------------------------------------------------------===
// Copyright Â© ${date.today().year} Jean Silva
//
// This file is part of the Deus open-source project.
//
// This program is free software: you can redistribute it and/or modify it under the terms of the
// GNU General Public License as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
// even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License along with this program. If
// not, see https://www.gnu.org/licenses.
// ===-------------------------------------------------------------------------------------------===

import Testing

@testable import StandardKit

struct MeasurementBackingUnitTests {
  % for index, (measurement_class, backing_unit_case) in enumerate(measurement_classes_and_backing_unit_cases.items()):
    % decapitalized_measurement_class = measurement_class[0].lower() + measurement_class[1:]
    % title_cased_backing_unit_case = backing_unit_case[0].upper() + backing_unit_case[1:]
  @Test func ${decapitalized_measurement_class}BackingUnitIs${title_cased_backing_unit_case}() {
    #expect(${measurement_class}.make(value: 0).symbol == ${measurement_class}.backingUnitSymbol)
    #expect(${measurement_class}.backingUnitSymbol == ${measurement_class}.${backing_unit_case}(0).symbol)
    #expect(${measurement_class}.${backing_unit_case}(2).value == 2)
  }
    % if index < len(measurement_classes_and_backing_unit_cases) - 1:

    % end
  % end
}
